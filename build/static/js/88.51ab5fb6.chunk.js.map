{"version":3,"file":"static/js/88.51ab5fb6.chunk.js","mappings":"+JACA,MAAuB,oB,SCKvB,EAJc,SAACA,GACb,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,a,mICF9C,EAAuB,+BAAvB,EAAgE,kCAAhE,EAA4G,kCAA5G,EAAwJ,kC,SCsGxJ,EA9FyB,SAACH,GACxB,OAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,GAAgBC,EAAAA,EAAAA,UAChBC,GAAcD,EAAAA,EAAAA,UACdE,GAAeF,EAAAA,EAAAA,UACfG,GAAeH,EAAAA,EAAAA,UACfI,GAAsBJ,EAAAA,EAAAA,UAEtBK,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAkC3B,OACE,UAAC,EAAAC,SAAD,YACE,SAAC,KAAD,CACEC,KAAMZ,EACNa,QAAS,SAACC,GAAD,MACP,oEAGJ,SAACC,EAAA,EAAD,WACE,kBACEC,QAlBR,WACEf,GAAa,IAkBPL,UAAWC,EACXoB,SA5CR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcf,EAAagB,QAAQC,MACnCC,EAAcjB,EAAae,QAAQC,MACnCE,EAAmBtB,EAAcmB,QAAQC,MACzCG,EAAiBrB,EAAYiB,QAAQC,MACrCI,EAAqBnB,EAAoBc,QAAQC,MAGjDK,EADU,WADHC,OAAOC,iBAGdC,EAAStB,EAAQuB,QAEvBpC,EAAMqC,iBAAiB,CACrBD,QAASD,EACTG,KAAMb,EACNc,KAAMX,EACNY,UAAWX,EACXY,QAASX,EACTY,YAAaX,EACbY,UAAWX,KAqBT,UAKGhC,EAAM4C,YACL,gBAAK3C,UAAWC,EAAhB,UACE,SAAC2C,EAAA,EAAD,OAIJ,iBAAK5C,UAAWC,EAAhB,WACE,kBAAO4C,QAAQ,OAAf,mBACA,kBAAOC,KAAK,OAAOC,GAAG,OAAOC,IAAKtC,QAEpC,iBAAKV,UAAWC,EAAhB,WACE,kBAAO4C,QAAQ,YAAf,yBACA,kBAAOC,KAAK,OAAOC,GAAG,YAAYC,IAAK1C,QAEzC,iBAAKN,UAAWC,EAAhB,WACE,kBAAO4C,QAAQ,UAAf,uBACA,kBAAOC,KAAK,OAAOC,GAAG,UAAUC,IAAKxC,QAEvC,iBAAKR,UAAWC,EAAhB,WACE,kBAAO4C,QAAQ,OAAf,mBACA,kBAAOC,KAAK,OAAOC,GAAG,OAAOC,IAAKvC,QAEpC,iBAAKT,UAAWC,EAAhB,WACE,kBAAO4C,QAAQ,cAAf,0BACA,kBAAOC,KAAK,OAAOC,GAAG,cAAcC,IAAKrC,QAE3C,gBAAKX,UAAWC,EAAhB,UACE,mBAAQgD,QA7ClB,WACE5C,GAAa,IA4CmCL,UAAU,MAAlD,wC,kBC/DZ,MAtBA,SAAwBD,GACtB,IAAMa,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC3B,GAAgCoC,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,GAAUC,EAAAA,EAAAA,MAWhB,OATAC,EAAAA,EAAAA,YAAU,WACO,cAAXH,GACFC,EAAQG,KAAR,wBAA8B7C,EAAQuB,YAEvC,CAACkB,EAAQC,EAAS1C,EAAQuB,WAM3B,SAAC,EAAD,CACEQ,UAAsB,YAAXU,EACXjB,iBANJ,SAA+BsB,GAC7BN,EAAYM","sources":["webpack://react-complete-guide/./src/components/UI/Card1.module.css?f397","components/UI/Card1.js","webpack://react-complete-guide/./src/components/Appointment/AppointmentsForm.module.css?b678","components/Appointment/AppointmentsForm.js","pages/NewAppointment.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card1_card__+QkD+\"};","import classes from './Card1.module.css';\r\n\r\nconst Card1 = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card1;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AppointmentsForm_form__H31Nz\",\"loading\":\"AppointmentsForm_loading__MdNoE\",\"control\":\"AppointmentsForm_control__gVtpK\",\"actions\":\"AppointmentsForm_actions__AlKMG\"};","import { useRef, useState, useContext } from \"react\";\r\nimport { Prompt } from \"react-router-dom\";\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport AuthContext from \"../../store/auth-context\";\r\n\r\nimport Card1 from \"../UI/Card1\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./AppointmentsForm.module.css\";\r\n\r\nconst AppointmentsForm = (props) => {\r\n  const [isEntered, setIsEntered] = useState(false);\r\n\r\n  const startInputRef = useRef();\r\n  const endInputRef = useRef();\r\n  const nameInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n    const enteredStartTime = startInputRef.current.value;\r\n    const enteredEndTime = endInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const time = Date().toLocaleString();\r\n    const created = \"Created \";\r\n    const currentTime = created + time;\r\n    const userId = authCtx.localId;\r\n\r\n    props.onAddAppointment({\r\n      localId: userId,\r\n      name: enteredName,\r\n      date: enteredDate,\r\n      startTime: enteredStartTime,\r\n      endTime: enteredEndTime,\r\n      description: enteredDescription,\r\n      timeStamp: currentTime,\r\n    });\r\n  }\r\n\r\n  function formFocusedHandler() {\r\n    setIsEntered(true);\r\n  }\r\n\r\n  function finishEnteringHandler() {\r\n    setIsEntered(false);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={isEntered}\r\n        message={(location) =>\r\n          \"Are you sure you want to leave? All entered data will be lost\"\r\n        }\r\n      />\r\n      <Card1>\r\n        <form\r\n          onFocus={formFocusedHandler}\r\n          className={classes.form}\r\n          onSubmit={submitFormHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"date\">Date</label>\r\n            <input type=\"date\" id=\"date\" ref={dateInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"startTime\">Start Time</label>\r\n            <input type=\"time\" id=\"startTime\" ref={startInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"endTime\">End Time</label>\r\n            <input type=\"time\" id=\"endTime\" ref={endInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input type=\"text\" id=\"name\" ref={nameInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"description\">Description</label>\r\n            <input type=\"text\" id=\"description\" ref={descriptionInputRef} />\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button onClick={finishEnteringHandler} className=\"btn\">\r\n              Add Appointment\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card1>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AppointmentsForm;\r\n","import { useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport AppointmentsForm from \"../components/Appointment/AppointmentsForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addAppointment } from \"../lib/api\";\r\nimport AuthContext from \"../store/auth-context\";\r\n\r\nfunction NewAppointment(props) {\r\n  const authCtx = useContext(AuthContext);\r\n  const { sendRequest, status } = useHttp(addAppointment);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(`/appointments/${authCtx.localId}`);\r\n    }\r\n  }, [status, history, authCtx.localId]);\r\n\r\n  function addAppointmentHandler(appointmentData) {\r\n    sendRequest(appointmentData);\r\n  }\r\n  return (\r\n    <AppointmentsForm\r\n      isLoading={status === \"pending\"}\r\n      onAddAppointment={addAppointmentHandler}\r\n    />\r\n  );\r\n}\r\n\r\nexport default NewAppointment;\r\n"],"names":["props","className","classes","children","useState","isEntered","setIsEntered","startInputRef","useRef","endInputRef","nameInputRef","dateInputRef","descriptionInputRef","authCtx","useContext","AuthContext","Fragment","when","message","location","Card1","onFocus","onSubmit","event","preventDefault","enteredName","current","value","enteredDate","enteredStartTime","enteredEndTime","enteredDescription","currentTime","Date","toLocaleString","userId","localId","onAddAppointment","name","date","startTime","endTime","description","timeStamp","isLoading","LoadingSpinner","htmlFor","type","id","ref","onClick","useHttp","addAppointment","sendRequest","status","history","useHistory","useEffect","push","appointmentData"],"sourceRoot":""}