{"version":3,"file":"static/js/739.4333507a.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/UI/Card1.module.css?f397","components/UI/Card1.js","webpack://react-complete-guide/./src/components/Update/UpdateForm.module.css?adce","components/Update/UpdateForm.js","hooks/use-https.js","pages/UpdateAppointment.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card1_card__+QkD+\"};","import classes from './Card1.module.css';\r\n\r\nconst Card1 = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card1;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"UpdateForm_form__MZHwP\",\"loading\":\"UpdateForm_loading__ADBJe\",\"control\":\"UpdateForm_control__1do-H\",\"actions\":\"UpdateForm_actions__ihx9c\"};","import { useRef, useState } from \"react\";\r\n\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport { Prompt } from \"react-router-dom\";\r\n\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport Card1 from \"../UI/Card1\";\r\n\r\nimport classes from \"./UpdateForm.module.css\";\r\n\r\nconst ProfileForm = (props) => {\r\n  const newStartTimeInputRef = useRef();\r\n  const newEndTimeInputRef = useRef();\r\n  const newNameInputRef = useRef();\r\n  const newDescriptionInputRef = useRef();\r\n  const newDateInputRef = useRef();\r\n\r\n  const [isEntered, setIsEntered] = useState(false);\r\n\r\n  const editFormHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredNewStartTime = newStartTimeInputRef.current.value;\r\n    const enteredNewEndTime = newEndTimeInputRef.current.value;\r\n    const enteredNewName = newNameInputRef.current.value;\r\n    const enteredNewDescription = newDescriptionInputRef.current.value;\r\n    const enteredNewDate = newDateInputRef.current.value;\r\n    const newCurrentTime = Date().toLocaleString();\r\n    const edited = \"Edited \";\r\n    const currentId = props.id;\r\n    const currentUser = props.uid;\r\n    const currTime = edited + newCurrentTime;\r\n\r\n    props.onUpdateAppointment({\r\n      localId: currentUser,\r\n      id: currentId,\r\n      name: enteredNewName,\r\n      startTime: enteredNewStartTime,\r\n      endTime: enteredNewEndTime,\r\n      description: enteredNewDescription,\r\n      date: enteredNewDate,\r\n      updatedTime: currTime,\r\n    });\r\n  };\r\n\r\n  function formFocusedHandler() {\r\n    setIsEntered(true);\r\n  }\r\n\r\n  async function finishEnteringHandler() {\r\n    setIsEntered(false);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={isEntered}\r\n        message={(location) =>\r\n          \"Are you sure you want to leave? All entered data will be lost\"\r\n        }\r\n      />\r\n      <Card1>\r\n        <form\r\n          onFocus={formFocusedHandler}\r\n          className={classes.form}\r\n          onSubmit={editFormHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"new-date\">Start Time</label>\r\n            <input type=\"date\" id=\"new-date\" ref={newDateInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"new-startTime\">Start Time</label>\r\n            <input type=\"time\" id=\"new-startTime\" ref={newStartTimeInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"new-endTime\">End Time</label>\r\n            <input type=\"time\" id=\"new-endTime\" ref={newEndTimeInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"new-name\">Name</label>\r\n            <input type=\"text\" id=\"new-name\" ref={newNameInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"new-description\">Description</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"new-description\"\r\n              ref={newDescriptionInputRef}\r\n            />\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button onClick={finishEnteringHandler} className=\"btn\">\r\n              Edit Appointment\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card1>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","import { useReducer, useCallback } from 'react';\r\n\r\nfunction httpReducer(state, action) {\r\n  if (action.type === 'SEND') {\r\n    return {\r\n      data: null,\r\n      error: null,\r\n      state: 'pending',\r\n    };\r\n  }\r\n\r\n  if (action.type === 'SUCCESS') {\r\n    return {\r\n      data: action.responseData,\r\n      error: null,\r\n      state: 'completed',\r\n    };\r\n  }\r\n\r\n  if (action.type === 'ERROR') {\r\n    return {\r\n      data: null,\r\n      error: action.errorMessage,\r\n      state: 'completed',\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction useHttps(requestFunction, startWithPending = false) {\r\n  const [httpState, dispatch] = useReducer(httpReducer, {\r\n    state: startWithPending ? 'pending' : null,\r\n    data: null,\r\n    error: null,\r\n  });\r\n\r\n  const sendRequests = useCallback(\r\n    async function (requestData) {\r\n      dispatch({ type: 'SEND' });\r\n      try {\r\n        const responseData = await requestFunction(requestData);\r\n        dispatch({ type: 'SUCCESS', responseData });\r\n      } catch (error) {\r\n        dispatch({\r\n          type: 'ERROR',\r\n          errorMessage: error.message || 'Something went wrong!',\r\n        });\r\n      }\r\n    },\r\n    [requestFunction]\r\n  );\r\n\r\n  return {\r\n    sendRequests,\r\n    ...httpState,\r\n  };\r\n}\r\n\r\nexport default useHttps;\r\n","import { useContext, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport UpdateForm from \"../components/Update/UpdateForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport useHttps from \"../hooks/use-https\";\r\nimport { UpdateAppointment } from \"../lib/api\";\r\nimport { getSingleAppointment } from \"../lib/api\";\r\nimport AuthContext from \"../store/auth-context\";\r\n\r\nfunction UpdateAppointments(props) {\r\n  const authCtx = useContext(AuthContext);\r\n  const params = useParams();\r\n  const history = useHistory();\r\n\r\n  const { appointmentId, userId } = params;\r\n\r\n  const { sendRequests, state } = useHttps(getSingleAppointment, true);\r\n\r\n  const { sendRequest, status } = useHttp(UpdateAppointment);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\" && state === \"completed\") {\r\n      history.replace(`/appointments/${authCtx.localId}`);\r\n    }\r\n  }, [status, state, history, authCtx.localId]);\r\n\r\n  useEffect(() => {\r\n    sendRequests(appointmentId);\r\n  }, [sendRequests, appointmentId]);\r\n\r\n  function updateAppointmentHandler(appointmentData) {\r\n    sendRequest(appointmentData);\r\n  }\r\n\r\n  return (\r\n    <UpdateForm\r\n      isLoading={status === \"pending\"}\r\n      onUpdateAppointment={updateAppointmentHandler}\r\n      id={appointmentId}\r\n      uid={userId}\r\n    />\r\n  );\r\n}\r\n\r\nexport default UpdateAppointments;\r\n"],"names":["props","className","classes","children","newStartTimeInputRef","useRef","newEndTimeInputRef","newNameInputRef","newDescriptionInputRef","newDateInputRef","useState","isEntered","setIsEntered","Fragment","when","message","location","Card1","onFocus","onSubmit","event","preventDefault","enteredNewStartTime","current","value","enteredNewEndTime","enteredNewName","enteredNewDescription","enteredNewDate","newCurrentTime","Date","toLocaleString","currentId","id","currentUser","uid","currTime","onUpdateAppointment","localId","name","startTime","endTime","description","date","updatedTime","isLoading","LoadingSpinner","htmlFor","type","ref","onClick","httpReducer","state","action","data","error","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequests","useCallback","requestData","authCtx","useContext","AuthContext","params","useParams","history","useHistory","appointmentId","userId","useHttps","getSingleAppointment","useHttp","UpdateAppointment","sendRequest","status","useEffect","replace","UpdateForm","appointmentData"],"sourceRoot":""}